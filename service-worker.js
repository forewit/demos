const s=location.pathname.split("/").slice(0,-1).join("/"),o=[s+"/app/immutable/entry/app.3a8968ff.js",s+"/app/immutable/assets/0.c50aaa28.css",s+"/app/immutable/nodes/0.938f5d68.js",s+"/app/immutable/nodes/1.22b58673.js",s+"/app/immutable/assets/10.98fccc1f.css",s+"/app/immutable/nodes/10.5a6c3497.js",s+"/app/immutable/assets/11.08e64b70.css",s+"/app/immutable/nodes/11.5cf3166a.js",s+"/app/immutable/assets/12.789c6171.css",s+"/app/immutable/nodes/12.2954d4b4.js",s+"/app/immutable/assets/2.234832d2.css",s+"/app/immutable/nodes/2.a1ad2941.js",s+"/app/immutable/nodes/3.ce87f1ec.js",s+"/app/immutable/nodes/4.1c5e8725.js",s+"/app/immutable/nodes/5.c950b7be.js",s+"/app/immutable/assets/6.493b836e.css",s+"/app/immutable/nodes/6.b93e4815.js",s+"/app/immutable/assets/7.66c3e924.css",s+"/app/immutable/nodes/7.726bf9c0.js",s+"/app/immutable/assets/8.8a817676.css",s+"/app/immutable/nodes/8.ed3fd99f.js",s+"/app/immutable/assets/9.3e9ec135.css",s+"/app/immutable/nodes/9.30a5c627.js",s+"/app/immutable/assets/Fireworks.c8075173.css",s+"/app/immutable/chunks/Fireworks.dd749715.js",s+"/app/immutable/chunks/authStore.478422a7.js",s+"/app/immutable/chunks/index.38a6999c.js",s+"/app/immutable/chunks/index.5b11db5e.js",s+"/app/immutable/chunks/paths.d060add5.js",s+"/app/immutable/chunks/singletons.bdd66851.js",s+"/app/immutable/chunks/stores.846ed9f5.js",s+"/app/immutable/entry/start.a3d012bf.js"],u=[s+"/fonts/PoltawskiNowy.ttf",s+"/images/clear-icon.svg",s+"/images/copy-icon.svg",s+"/images/leaf.svg",s+"/images/moon.svg",s+"/images/pen-square.svg",s+"/images/pen-square_512.png",s+"/images/pen.svg",s+"/images/solar-system-animation.svg",s+"/images/sun.svg",s+"/manifest.json",s+"/markdown/test.md",s+"/markdown/the-seasons.md"],l="1713818226011",c=`cache-${l}`,p=[...o,...u];self.addEventListener("install",a=>{async function n(){await(await caches.open(c)).addAll(p)}a.waitUntil(n())});self.addEventListener("activate",a=>{async function n(){for(const t of await caches.keys())t!==c&&await caches.delete(t)}a.waitUntil(n())});self.addEventListener("fetch",a=>{if(a.request.method!=="GET")return;async function n(){const t=new URL(a.request.url),i=await caches.open(c);if(p.includes(t.pathname)){const e=await i.match(t.pathname);if(e)return e}try{const e=await fetch(a.request);if(!(e instanceof Response))throw new Error("invalid response from fetch");return e.status===200&&i.put(a.request,e.clone()),e}catch(e){const m=await i.match(a.request);if(m)return m;throw e}}a.respondWith(n())});
