const s=location.pathname.split("/").slice(0,-1).join("/"),o=[s+"/app/immutable/entry/app.46a36dc0.js",s+"/app/immutable/assets/0.c50aaa28.css",s+"/app/immutable/nodes/0.938f5d68.js",s+"/app/immutable/nodes/1.b9730c43.js",s+"/app/immutable/assets/10.98fccc1f.css",s+"/app/immutable/nodes/10.69f2d98d.js",s+"/app/immutable/assets/11.08e64b70.css",s+"/app/immutable/nodes/11.5cf3166a.js",s+"/app/immutable/assets/12.789c6171.css",s+"/app/immutable/nodes/12.2954d4b4.js",s+"/app/immutable/assets/2.234832d2.css",s+"/app/immutable/nodes/2.530bbca8.js",s+"/app/immutable/nodes/3.528c293f.js",s+"/app/immutable/nodes/4.1c5e8725.js",s+"/app/immutable/nodes/5.402e46f8.js",s+"/app/immutable/assets/6.493b836e.css",s+"/app/immutable/nodes/6.786ec407.js",s+"/app/immutable/assets/7.66c3e924.css",s+"/app/immutable/nodes/7.726bf9c0.js",s+"/app/immutable/assets/8.8a817676.css",s+"/app/immutable/nodes/8.ed3fd99f.js",s+"/app/immutable/assets/9.3e9ec135.css",s+"/app/immutable/nodes/9.d748c841.js",s+"/app/immutable/assets/Fireworks.c8075173.css",s+"/app/immutable/chunks/Fireworks.dd749715.js",s+"/app/immutable/chunks/authStore.51e7dcb9.js",s+"/app/immutable/chunks/index.38a6999c.js",s+"/app/immutable/chunks/index.5b11db5e.js",s+"/app/immutable/chunks/paths.d4630bcc.js",s+"/app/immutable/chunks/singletons.47a4fa19.js",s+"/app/immutable/chunks/stores.bef25170.js",s+"/app/immutable/entry/start.9b40fecd.js"],u=[s+"/fonts/PoltawskiNowy.ttf",s+"/images/clear-icon.svg",s+"/images/copy-icon.svg",s+"/images/leaf.svg",s+"/images/moon.svg",s+"/images/pen-square.svg",s+"/images/pen-square_512.png",s+"/images/pen.svg",s+"/images/solar-system-animation.svg",s+"/images/sun.svg",s+"/manifest.json",s+"/markdown/test.md",s+"/markdown/the-seasons.md"],l="1713879357581",i=`cache-${l}`,p=[...o,...u];self.addEventListener("install",e=>{async function n(){await(await caches.open(i)).addAll(p)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==i&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),c=await caches.open(i);if(p.includes(t.pathname)){const a=await c.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&c.put(e.request,a.clone()),a}catch(a){const m=await c.match(e.request);if(m)return m;throw a}}e.respondWith(n())});
