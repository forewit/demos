const s=location.pathname.split("/").slice(0,-1).join("/"),o=[s+"/app/immutable/entry/app.25dea1d0.js",s+"/app/immutable/assets/0.a8e7b972.css",s+"/app/immutable/nodes/0.72eb7918.js",s+"/app/immutable/nodes/1.2df97941.js",s+"/app/immutable/assets/10.08e64b70.css",s+"/app/immutable/nodes/10.d2caee5d.js",s+"/app/immutable/assets/11.789c6171.css",s+"/app/immutable/nodes/11.ad2390f4.js",s+"/app/immutable/assets/2.3b8cd966.css",s+"/app/immutable/nodes/2.3abe6345.js",s+"/app/immutable/nodes/3.f0b7a68a.js",s+"/app/immutable/nodes/4.133e8918.js",s+"/app/immutable/nodes/5.eb6b3e14.js",s+"/app/immutable/assets/6.a003a65c.css",s+"/app/immutable/nodes/6.b5838bfe.js",s+"/app/immutable/assets/7.66c3e924.css",s+"/app/immutable/nodes/7.addc3bc3.js",s+"/app/immutable/assets/8.8a817676.css",s+"/app/immutable/nodes/8.5d02dd32.js",s+"/app/immutable/assets/9.98fccc1f.css",s+"/app/immutable/nodes/9.c127992f.js",s+"/app/immutable/assets/Fireworks.c8075173.css",s+"/app/immutable/chunks/Fireworks.561d967d.js",s+"/app/immutable/chunks/authStore.c6fd8d1e.js",s+"/app/immutable/chunks/index.1f9ba7ab.js",s+"/app/immutable/chunks/index.70f2cfbf.js",s+"/app/immutable/chunks/paths.34daded3.js",s+"/app/immutable/chunks/singletons.4e622425.js",s+"/app/immutable/chunks/stores.cd8e5178.js",s+"/app/immutable/entry/start.704670ca.js"],u=[s+"/fonts/PoltawskiNowy.ttf",s+"/images/leaf.svg",s+"/images/moon.svg",s+"/images/pen-square.svg",s+"/images/pen-square_512.png",s+"/images/pen.svg",s+"/images/solar-system-animation.svg",s+"/images/sun.svg",s+"/manifest.json",s+"/markdown/test.md",s+"/markdown/the-seasons.md"],d="1711652602503",c=`cache-${d}`,p=[...o,...u];self.addEventListener("install",e=>{async function n(){await(await caches.open(c)).addAll(p)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==c&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),i=await caches.open(c);if(p.includes(t.pathname)){const a=await i.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&i.put(e.request,a.clone()),a}catch(a){const m=await i.match(e.request);if(m)return m;throw a}}e.respondWith(n())});
