const s=location.pathname.split("/").slice(0,-1).join("/"),o=[s+"/app/immutable/entry/app.ccb954b7.js",s+"/app/immutable/assets/0.c50aaa28.css",s+"/app/immutable/nodes/0.3e875e47.js",s+"/app/immutable/nodes/1.e9023e45.js",s+"/app/immutable/assets/10.98fccc1f.css",s+"/app/immutable/nodes/10.bfcdf969.js",s+"/app/immutable/assets/11.08e64b70.css",s+"/app/immutable/nodes/11.c60ba58b.js",s+"/app/immutable/assets/12.789c6171.css",s+"/app/immutable/nodes/12.06d7be82.js",s+"/app/immutable/assets/2.234832d2.css",s+"/app/immutable/nodes/2.96fe0a07.js",s+"/app/immutable/nodes/3.563b278b.js",s+"/app/immutable/nodes/4.2b70ba61.js",s+"/app/immutable/nodes/5.6517b734.js",s+"/app/immutable/assets/6.493b836e.css",s+"/app/immutable/nodes/6.fb99fb77.js",s+"/app/immutable/assets/7.e8568e3d.css",s+"/app/immutable/nodes/7.dbf06e0e.js",s+"/app/immutable/assets/8.66c3e924.css",s+"/app/immutable/nodes/8.817ab5b0.js",s+"/app/immutable/assets/9.8a817676.css",s+"/app/immutable/nodes/9.2b685962.js",s+"/app/immutable/assets/Fireworks.c8075173.css",s+"/app/immutable/chunks/Fireworks.9c9b7bf2.js",s+"/app/immutable/chunks/authStore.13647653.js",s+"/app/immutable/chunks/index.513dcc03.js",s+"/app/immutable/chunks/index.965e08d6.js",s+"/app/immutable/chunks/paths.d23239ea.js",s+"/app/immutable/chunks/singletons.19afdfb0.js",s+"/app/immutable/chunks/stores.0d79a4e4.js",s+"/app/immutable/entry/start.3557f36b.js"],u=[s+"/fonts/PoltawskiNowy.ttf",s+"/images/clear-icon.svg",s+"/images/copy-icon.svg",s+"/images/leaf.svg",s+"/images/moon.svg",s+"/images/pen-square.svg",s+"/images/pen-square_512.png",s+"/images/pen.svg",s+"/images/solar-system-animation.svg",s+"/images/sun.svg",s+"/manifest.json",s+"/markdown/test.md",s+"/markdown/the-seasons.md"],l="1713894127119",m=`cache-${l}`,c=[...o,...u];self.addEventListener("install",e=>{async function n(){await(await caches.open(m)).addAll(c)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==m&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),i=await caches.open(m);if(c.includes(t.pathname)){const a=await i.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&i.put(e.request,a.clone()),a}catch(a){const p=await i.match(e.request);if(p)return p;throw a}}e.respondWith(n())});
