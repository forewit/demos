const s=location.pathname.split("/").slice(0,-1).join("/"),o=[s+"/app/immutable/entry/app.f0d434d8.js",s+"/app/immutable/assets/0.8806c214.css",s+"/app/immutable/nodes/0.03c7267d.js",s+"/app/immutable/nodes/1.78ec044d.js",s+"/app/immutable/assets/10.08e64b70.css",s+"/app/immutable/nodes/10.def43947.js",s+"/app/immutable/assets/11.789c6171.css",s+"/app/immutable/nodes/11.51b99f26.js",s+"/app/immutable/assets/2.9e6d6b38.css",s+"/app/immutable/nodes/2.3f4cd14b.js",s+"/app/immutable/nodes/3.ce87f1ec.js",s+"/app/immutable/nodes/4.1c5e8725.js",s+"/app/immutable/nodes/5.cbe143db.js",s+"/app/immutable/assets/6.a003a65c.css",s+"/app/immutable/nodes/6.a2b0c7ba.js",s+"/app/immutable/assets/7.66c3e924.css",s+"/app/immutable/nodes/7.726bf9c0.js",s+"/app/immutable/assets/8.8a817676.css",s+"/app/immutable/nodes/8.ed3fd99f.js",s+"/app/immutable/assets/9.98fccc1f.css",s+"/app/immutable/nodes/9.909e48a7.js",s+"/app/immutable/assets/Fireworks.c8075173.css",s+"/app/immutable/chunks/Fireworks.dd749715.js",s+"/app/immutable/chunks/authStore.478422a7.js",s+"/app/immutable/chunks/index.38a6999c.js",s+"/app/immutable/chunks/index.5b11db5e.js",s+"/app/immutable/chunks/paths.7c35dec2.js",s+"/app/immutable/chunks/singletons.062aced8.js",s+"/app/immutable/chunks/stores.9d8e750c.js",s+"/app/immutable/entry/start.6d000a92.js"],l=[s+"/fonts/PoltawskiNowy.ttf",s+"/images/leaf.svg",s+"/images/moon.svg",s+"/images/pen-square.svg",s+"/images/pen.svg",s+"/images/solar-system-animation.svg",s+"/images/sun.svg",s+"/logo_512.png",s+"/manifest.json",s+"/markdown/test.md",s+"/markdown/the-seasons.md"],u="1711645281162",i=`cache-${u}`,p=[...o,...l];self.addEventListener("install",e=>{async function n(){await(await caches.open(i)).addAll(p)}e.waitUntil(n())});self.addEventListener("activate",e=>{async function n(){for(const t of await caches.keys())t!==i&&await caches.delete(t)}e.waitUntil(n())});self.addEventListener("fetch",e=>{if(e.request.method!=="GET")return;async function n(){const t=new URL(e.request.url),c=await caches.open(i);if(p.includes(t.pathname)){const a=await c.match(t.pathname);if(a)return a}try{const a=await fetch(e.request);if(!(a instanceof Response))throw new Error("invalid response from fetch");return a.status===200&&c.put(e.request,a.clone()),a}catch(a){const m=await c.match(e.request);if(m)return m;throw a}}e.respondWith(n())});
